/*
【题目描述】
潜水员为了潜水要使用特殊的装备。他有一个带2种气体的气缸：一个为氧气，一个为氮气。让潜水员下潜的深度需要各种的数量的氧和氮。潜水员有一定数量的气缸。每个气缸都有重量和气体容量。潜水员为了完成他的工作需要特定数量的氧和氮。他完成工作所需气缸的总重的最低限度的是多少？

例如：潜水员有5个气缸。每行三个数字为：氧，氮的（升）量和气缸的重量：

3 36 120

10 25 129

5 50 250

1 45 130

4 20 119

如果潜水员需要5升的氧和60升的氮则总重最小为249（1，2或者4，5号气缸）。

你的任务就是计算潜水员为了完成他的工作需要的气缸的重量的最低值。

【输入】
第一行有2整数m，n（1≤m≤21，1≤n≤79）。它们表示氧，氮各自需要的量。

第二行为整数k（1≤n≤1000）表示气缸的个数。

此后的k行，每行包括ai，bi，ci（1≤ai≤21，1≤bi≤79，1≤ci≤800）3整数。这些各自是：第i个气缸里的氧和氮的容量及汽缸重量。

【输出】
仅一行包含一个整数，为潜水员完成工作所需的气缸的重量总和的最低值。

【输入样例】
5 60
5
3 36 120
10 25 129
5 50 250
1 45 130
4 20 119
【输出样例】
249
*/
#include <iostream>
using namespace std;

const int N = 1010, M = 90, INF = N * 810; 
int m, n, k, a[N], b[N], c[N], dp[M][M]; // dp[i][j]:=挑选出氧气总和为i氮气总和为j的最小重量 

int solve()
{
	int ta = 0, tb = 0;
	for (int x = 0; x < k; x++)
		for (int i = m; i >= 0; i--)
			for (int j = n; j >= 0; j--)
			{
				ta = i + a[x], tb = j + b[x];
				ta = min(ta, m);                       
				tb = min(tb, n);
				dp[ta][tb] = min(dp[ta][tb], dp[i][j] + c[x]);
			}
	return 0;
}

int main()
{
	cin >> m >> n >> k;
	for (int i = 0; i < k; i++)
		cin >> a[i] >> b[i] >> c[i]; 
		
	fill(dp[0], dp[0] + M * M + 1, INF);
	
	dp[0][0] = 0;
	solve();
	
	cout << dp[m][n] << endl;
	
	return 0;
}
