/*
【题目描述】
一个旅行者有一个最多能装V公斤的背包，现在有n件物品，它们的重量分别是W1，W2，...,Wn，它们的价值分别为C1,C2,...,Cn。有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。

【输入】
第一行：二个整数，M(背包容量，M≤200)，N(物品数量，N≤30)；

第2..N+1行：每行三个整数Wi,Ci,Pi，前两个整数分别表示每个物品的重量，价值，第三个整数若为0，则说明此物品可以购买无数件，若为其他数字，则为此物品可购买的最多件数(Pi)。

【输出】
仅一行，一个数，表示最大总价值。

【输入样例】
10  3
2  1  0
3  3  1
4  5  4
【输出样例】
11
【提示】
选第一件物品1件和第三件物品2件。
*/
#include <iostream>
using namespace std;

const int N = 35, M = 210;
int m, n, p;
int w[N], c[N], w1[N*M], c1[N*M], dp[M];

int main()
{
	cin >> m >> n;
	
	int num = 0;
	for (int i = 1; i <= n; i++)
	{
		cin >> w[i] >> c[i] >> p;
		
		// 转换成01背包问题 
		p = p > 0 ? p : m / w[i];
		for (int j = 0; j < p; j++)
		{
			num++;
			w1[num] = w[i];
			c1[num] = c[i];
		}
	}
	
	for (int i = 1; i <= num; i++)
		for (int j = m; j >= w1[i]; j--)
			dp[j] = max(dp[j], dp[j-w1[i]] + c1[i]);
		
	cout << dp[m] << endl;
	return 0;
} 
